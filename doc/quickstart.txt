DiffKit QuickStart
====================
@AUTHOR@
v@VERSION@, @BUILDDATE@ (SVN @REVISION@)

Prerequisites 
-------------
Ensure that you have first read the link:README.html[README file].


Verifying your environment 
--------------------------
The DiffKit standalone application carries with it a complete functional test
suite. In order to verify that the standalone application works properly in your
particular environment, you should first execute the functional test suite:
-------------------------------
   java -jar diffkit-app.jar -test
-------------------------------
The resulting output should report that all tests PASSED. If any test FAILED,
please report the failure to the DiffKit user group
http://groups.google.com/group/diffkit-user[diffkit-user] as soon as possible,
and don't use DiffKit.


Diff'ng
-------
DiffKit allows you to select two _Sources_ (a Left Hand Source and a Right Hand
Source) of tabular data for comparison on a value-by-value basis, and to send
the results of the comparison (diffs) to a _Sink_ (typically a structured file).
You must specify the _Sources_ and _Sink_ to DiffKit via an XML configuration
file, called a _plan_ file. The "eg/" directory in the DiffKit distribution
(zip) contains many examples of such plan files.


Diff'ng File tables
-------------------
test9.plan.xml, in the eg/ directory, is a very simple _plan_ file that
instructs DiffKit to compare two csv files: test9.lhs.csv, and test9.rhs.csv.
The output (diffs) will be sent to a file named test9.sink.diff. You can invoke
the DiffKit standalone application to run this _plan_ file. From the
distribution directory:
-----------------
cd eg/
java -jar ../diffkit-app.jar -planfiles test9.plan.xml
-----------------
DiffKit prints a summary of the results to the console:
-----------------
diff'd 8 rows in 0:00:00.009, found:
!4 row diffs
@2 column diffs
-----------------
The summary tells us that there were 4 row diffs; a row diff occurs when DiffKit
finds a row on one side, but no corresponding row on the other side. Rows are
uniquely identified by a _key_ (analogous to a primary key in relational DBs)
which defaults to column1 if not otherwise specified. The summary states that
there were also 2 column diffs, which means that DiffKit was able to join (align)
the rows, but that values in some of the columns were different between the left
and right hand side.

Running test9.plan.xml above created an output (diff) file named test9.sink.diff.
That file contains an entry for each diff discovered. The first entry in that file 
describes a column diff:

.test9.sink.diff
-----------------
@{column1=1111}
column2
<1111
>xxxx
-----------------
It tells us that the row identified by the key value (column1=1111) has a column
diff in column2. The lhs value for column2 is 1111 while the rhs value is xxxx.
The next entry in the diff file describes a row diff:

.test9.sink.diff cont.
-----------------
!{column1=2222}
<
-----------------
This indicates that the row identified by column1=2222 is missing from the lhs.
Or put another way, this row is present on the rhs and not present on the lhs. 
You should open test9.lhs.csv side-by-side with test9.rhs.csv in order to verify
that all entries in the diff file match your expectations.

test11.plan.xml shows how to explicitly specify which columns constitute the _key_,
used to align (join) the rows between lhs and rhs:

.test11.plan.xml
-----------------
   ...
   <property name="keyColumnNames">
      <list>
         <value>column3</value>
   ...
-----------------


test13.plan.xml demonstrates how to instruct DiffKit to consider only certain
columns during comparison, ignoring all other columns:

.test13.plan.xml
-----------------
   ...
   <property name="diffColumnNames">
      <list>
         <value>column2</value>
   ...
-----------------
It also shows how to specify that rows should be identified in the output (diff)
file by values other than the key values:

.test13.plan.xml cont.
-----------------
   ...
   <property name="displayColumnNames">
      <list>
         <value>column1</value>
         <value>column3</value>
   ...
-----------------

test14.plan.xml demonstrates how to tell DiffKit to consider all
columns during comparison except for a specified list (blacklist).

.test14.plan.xml
-----------------
   ...
   <property name="ignoreColumnNames">
      <list>
         <value>column3</value>
         <value>column4</value>
   ...
-----------------

test21.plan.xml shows how to specify which _kinds_ of diffs should be considered: 
ROW_DIFF, COLUMN_DIFF, or BOTH (default). It also shows how to tell DiffKit to 
halt diffing after a certain number of diffs has been recorded:

.test21.plan.xml
-----------------
   ...
   <property name="diffKind" value="ROW_DIFF" />
   <property name="maxDiffs" value="2" />
   ...
-----------------

            
Diff'ng DB tables
-----------------
Diff'ng DB tables uses plan files in the same fashion as diff'ng files. The only
difference is that instead of file paths, you must provide table names, and you 
must also tell DiffKit how to connect to the lhs and rhs databases.

test10.plan.xml demonstrates how to specify the table names used in the comparison:

.test10.plan.xml
-----------------
   ...
   <property name="lhsDBTableName" value="LHS_TABLE" />
   <property name="rhsDBTableName" value="RHS_TABLE" />
   ...
-----------------
The two tables, LHS_TABLE and RHS_TABLE, both reside in the same database. That
database is identified with these plan elements:

.test10.plan.xml cont.
-----------------
   ...
   <bean id="plan" class="org.diffkit.diff.conf.DKMagicPlan">
     <property name="dbConnectionInfo" ref="connectionInfo" />
   ...
   <bean id="connectionInfo" class="org.diffkit.db.DKDBConnectionInfo">
     <constructor-arg index="0" value="test" />
     <constructor-arg index="1" value="H2" />
     <constructor-arg index="2" value="mem:testcase;DB_CLOSE_DELAY=-1" />
     <constructor-arg index="3">
			<null />
     </constructor-arg>
     <constructor-arg index="4">
			<null />
     </constructor-arg>
     <constructor-arg index="5" value="test" />
     <constructor-arg index="6" value="test" />
  </bean>
-----------------
The connectionInfo points to an in-memory H2 database named "testcase". The 
username is "test" and the password is "test". 

WARNING: If you run this plan file it will
fail with the following error:
...
+Caused by: java.lang.RuntimeException: couldn't find table named->LHS_TABLE
	at org.diffkit.diff.sns.DKDBSource.<init>(DKDBSource.java:)+
...
That's because the tables do not exist. If you want to successfully run this plan
file you must create and populate the target tables yourself.

The connectionInfo to a similar IBM DB2 database:
-----------------
   ...
   <bean id="connectionInfo" class="org.diffkit.db.DKDBConnectionInfo">
     <constructor-arg index="0" value="test" />
     <constructor-arg index="1" value="DB2" />
     <constructor-arg index="2" value="testcase" />
     <constructor-arg index="3" value="db2host.diffkit.org" />
     <constructor-arg index="4" value="50000" />
     <constructor-arg index="5" value="test" />
     <constructor-arg index="6" value="test" />
  </bean>
-----------------
This connectionInfo points to an IBM DB2 database named "testcase", running
on host "db2host.diffkit.org" and port 50000.

DiffKit can compare tables across different physical and/or logical databases.
test18.plan.xml demonstrates this:

.test18.plan.xml
-----------------
   ...
   <bean id="connectionInfo" class="org.diffkit.diff.conf.DKMagicPlan">
     ...
     <property name="lhsDBConnectionInfo" ref="lhsDBConnectionInfo" />
     <property name="rhsDBConnectionInfo" ref="rhsDBConnectionInfo" />
     ...
   </bean>
   <bean id="lhsDBConnectionInfo" class="org.diffkit.db.DKDBConnectionInfo">
     ...
     <constructor-arg index="2" value="mem:testcase18_lhs;DB_CLOSE_DELAY=-1" />
     ...
   </bean>
   <bean id="rhsDBConnectionInfo" class="org.diffkit.db.DKDBConnectionInfo">
     ...
     <constructor-arg index="2" value="mem:testcase18_rhs;DB_CLOSE_DELAY=-1" />
     ...
  </bean>
-----------------
In this case, table "LHS_TABLE" is located in a database named "testcase18_lhs",
while table "RHS_TABLE" is located in a database named "testcase18_rhs".


Diff'ng different kinds of Sources
----------------------------------
Any _kind_ of source can appear on either the lhs or the rhs. That means you can
mix source _kinds_ in the same comparison. test12.plan.xml demonstrates this:

.test12.plan.xml
-----------------
   <bean id="plan" class="org.diffkit.diff.conf.DKMagicPlan">
     <property name="lhsDBTableName" value="LHS_TABLE" />
     <property name="rhsFilePath" value="./test12.rhs.csv" />
     <property name="dbConnectionInfo" ref="connectionInfo" />
  ...
   <bean id="connectionInfo" class="org.diffkit.db.DKDBConnectionInfo">
   ...
     <constructor-arg index="2" value="mem:testcase12;DB_CLOSE_DELAY=-1" />
   ...
-----------------
This plan specifies that the lhs _source_ is a DB table named LHS_TABLE, which
resides in the database named "testcase12". The rhs _source_ is a csv file named
test12.rhs.csv.


Modularizing the config files
-----------------------------
Frequently you would like to apply different comparisons (different table pairs)
within or across the same logical/physical databases. Likewise, it's not
uncommon to want to compare the same table pairs, but within different
environments at different times. For example, you might want to diff two tables
in your development environment early in the SDLC, and then later, during the QA
phase, diff those same tables in your QA environment. To support both of the
above cases, DiffKit allows you to reuse plan file elements via composition. For
instance, test10.plan.xml could be broken up into two pieces. The first piece
describes the target table names and other characteristics of the comparison;
test10.scheme.xml:

.test10.scheme.xml
-----------------
   <bean id="plan" class="org.diffkit.diff.conf.DKMagicPlan">
     <property name="lhsDBTableName" value="LHS_TABLE" />
     <property name="rhsDBTableName" value="RHS_TABLE" />
     <property name="keyColumnNames">
        <list>
           <value>COLUMN3</value>
        </list>
     </property>
     <property name="dbConnectionInfo" ref="connectionInfo" />
     <property name="sinkFilePath" value="./test10.sink.diff" />
   </bean>
-----------------

The other piece just describes which database(s) to point to; test10.connection.xml:

.test10.connection.xml
-----------------
   <bean id="connectionInfo" class="org.diffkit.db.DKDBConnectionInfo">
     <constructor-arg index="0" value="test" />
     <constructor-arg index="1" value="H2" />
     <constructor-arg index="2" value="mem:testcase;DB_CLOSE_DELAY=-1" />
     <constructor-arg index="3">
			<null />
     </constructor-arg>
     <constructor-arg index="4">
			<null />
     </constructor-arg>
     <constructor-arg index="5" value="test" />
     <constructor-arg index="6" value="test" />
  </bean>
-----------------
Then the two specifications are composed at runtime this way:
-----------------
java -jar ../diffkit-app.jar -planfiles test10.scheme.xml,test10.connection.xml
-----------------


Next Steps
----------
Read the link:faq.html[faq]. 

Read the link:userguide.html[User Guide]. 

Send questions to: diffkit-user@googlegroups.com.
