DiffKit QuickStart
====================
@AUTHOR@
v@VERSION@, @BUILDDATE@ (SVN @REVISION@)

Prerequisites 
-------------
Ensure that you have first read the link:README.html[README file].


Verifying your environment 
--------------------------
The DiffKit standalone application carries with it a complete functional test
suite. In order to verify that the standalone application works properly in your
particular environment, you should first execute the functional test suite:
-------------------------------
   java -jar diffkit-app.jar -test
-------------------------------
The resulting output should report that all tests PASSED. If any test FAILED,
please report the failure to the DiffKit user group
http://groups.google.com/group/diffkit-user[diffkit-user] as soon as possible,
and don't use DiffKit.


Diff'ng
-------
DiffKit allows you to select two _Sources_ (a Left Hand Source and a Right Hand
Source) of tabular data for comparison on a value-by-value basis, and to send
the results of the comparison (diffs) to a _Sink_ (typically a structured file).
You must specify the _Sources_ and _Sink_ to DiffKit via an XML configuration
file, called a _plan_ file. The "eg/" directory in the DiffKit distribution
(zip) contains many examples of such plan files.


Diff'ng File tables
-------------------
test9.plan.xml, in the eg/ directory, is a very simple _plan_ file that
instructs DiffKit to compare two csv files: test9.lhs.csv, and test9.rhs.csv.
The output (diffs) will be sent to a file named test9.sink.diff. You can invoke
the DiffKit standalone application to run this _plan_ file. From the
distribution directory:
-----------------
cd eg/
java -jar ../diffkit-app.jar -planfiles test9.plan.xml
-----------------
DiffKit prints a summary of the results to the console:
-----------------
diff'd 8 rows in 0:00:00.009, found:
!4 row diffs
@2 column diffs
-----------------
The summary tells us that there were 4 row diffs; a row diff occurs when DiffKit
finds a row on one side, but no corresponding row on the other side. Rows are
uniquely identified by a _key_ (analogous to a primary key in relational DBs)
which defaults to column1 if not otherwise specified. The summary states that
there were also 2 column diffs, which means that DiffKit was able to join (align)
the rows, but that values in some of the columns were different between the left
and right hand side.

Running test9.plan.xml above created an output (diff) file named test9.sink.diff.
That file contains an entry for each diff discovered. The first entry in that file 
describes a column diff:
-----------------
@{column1=1111}
column2
<1111
>xxxx
-----------------
It tells us that the row identified by the key value (column1=1111) has a column
diff in column2. The lhs value for column2 is 1111 while the rhs value is xxxx.
The next entry in the diff file describes a row diff:
-----------------
!{column1=2222}
<
-----------------
This indicates that the row identified by column1=2222 is missing from the lhs.
Or put another way, this row is present on the rhs and not present on the lhs. 
You should open test9.lhs.csv side-by-side with test9.rhs.csv in order to verify
that all entries in the diff file match your expectations.

test11.plan.xml shows how to explicitly specify which columns constitute the _key_,
used to align (join) the rows between lhs and rhs:
-----------------
   ...
   <property name="keyColumnNames">
      <list>
         <value>column3</value>
   ...
-----------------


test13.plan.xml demonstrates how to instruct DiffKit to consider only certain
columns during comparison, ignoring all other columns:
-----------------
   ...
   <property name="diffColumnNames">
      <list>
         <value>column2</value>
   ...
-----------------
It also shows how to specify that rows should be identified in the output (diff)
file by values other than the key values:
-----------------
   ...
   <property name="displayColumnNames">
      <list>
         <value>column1</value>
         <value>column3</value>
   ...
-----------------

test14.plan.xml demonstrates how to tell DiffKit to consider all
columns during comparison except for a specified list (blacklist).
-----------------
   ...
   <property name="ignoreColumnNames">
      <list>
         <value>column3</value>
         <value>column4</value>
   ...
-----------------

test21.plan.xml shows how to specify which _kinds_ of diffs should be considered: 
ROW_DIFF, COLUMN_DIFF, or BOTH (default). It also shows how to tell DiffKit to 
halt diffing after a certain number of diffs has been recorded:
-----------------
   ...
   <property name="diffKind" value="ROW_DIFF" />
   <property name="maxDiffs" value="2" />
   ...
-----------------

            
Diff'ng DB tables
-----------------
Diff'ng DB tables uses plan files in the same fashion as diff'ng files. The only
difference is that instead of a file paths, you must provide table names, and you 
must also tell DiffKit how to connect to the lhs and rhs databases.



Modularizing the config files
-----------------------------


Next Steps
----------
Read the link:faq.html[faq]. 

Read the link:userguide.html[User Guide]. 

Send questions to: diffkit-user@googlegroups.com.
